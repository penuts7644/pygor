# Pygor is part of the IGoR (Inference and Generation of Repertoires) software.
# Pygor Python package can be used to post process files generated by IGoR.
# Copyright (C) 2018 Quentin Marcou & Wout van Helvoirt

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""Test file for testing pygor.cdr3.anchor_locator file."""


import pytest

from pygor.alignment.muscle_aligner import MuscleAligner
from pygor.cdr3.anchor_locator import AnchorLocator


def create_alignment():
    """Create an alignment to use for testing."""
    aligner = MuscleAligner(infile='tests/test_data/IGL_J_mouse.fasta')
    return aligner.get_muscle_alignment()


@pytest.mark.parametrize('gene, custom_motifs, expected', [
    ('J', None, {'TGG': {'AF357974|IGLJ5*01|Mus': 15, 'J00593|IGLJ2*01|Mus': 15,
                         'J00584|IGLJ3P*01|Mus': 18, 'M16555|IGLJ4*01|Mus': 15,
                         'J00596|IGLJ4*01|Mus': 15, 'J00583|IGLJ3*01|Mus': 15},
                 'TTT': {'J00584|IGLJ3P*01|Mus': 8, 'J00583|IGLJ3*01|Mus': 5,
                         'J00593|IGLJ2*01|Mus': 5},
                 'TTC': {'AF357974|IGLJ5*01|Mus': 7, 'J00593|IGLJ2*01|Mus': 7,
                         'M16555|IGLJ4*01|Mus': 7, 'J00596|IGLJ4*01|Mus': 7,
                         'V00813|IGLJ1*01|Mus': 7, 'J00583|IGLJ3*01|Mus': 7}
                }),
    pytest.param('J', ['AGT'], {'AGT': {'J00583|IGLJ3*01|Mus': 13}}),
    pytest.param('X', None, None, marks=pytest.mark.xfail)
])
def test_anchor_locator(gene, custom_motifs, expected):
    """Test if correct indices of conserved motif regions are returned.

    Parameters
    ----------
    gene : string
        A gene identifier, either V or J, specifying the alignment's origin.
    custom_motifs : list
        Use custom motif strings to search for in the alignment. If not
        specified, default motifs for the V or J genes are used (See notes
        for more info).
    expected : dict
        The expected output dict with indices.

    Raises
    -------
    AssertionError
        If the performed test failed.

    """
    locator = AnchorLocator(alignment=create_alignment(), gene=gene)
    indices = locator.get_indices_motifs(custom_motifs=custom_motifs)
    print(indices)
    for key1, value1 in indices.items():
        for key2, value2 in value1.items():
            assert value2 == expected[key1][key2]
