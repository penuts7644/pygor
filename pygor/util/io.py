# Pygor is part of the IGoR (Inference and Generation of Repertoires) software.
# Pygor Python package can be used to post process files generated by IGoR.
# Copyright (C) 2018 Quentin Marcou & Wout van Helvoirt

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""Contains I/O related functions used in pygor."""


import os

from Bio.SeqIO.FastaIO import SimpleFastaParser
import pandas


def read_fasta_as_dataframe(infile):
    """Creates a pandas.DataFrame from the FASTA file.

    The dataframe contains label name and sequence columns containing the
    corresponding FASTA data.

    Parameters
    ----------
    infile : string
        Location of the FASTA file to be read in.

    """
    # Create a dataframe and read in the fasta file.
    fasta_df = pandas.DataFrame()
    with open(infile, 'r') as fasta_file:
        for title, sequence in SimpleFastaParser(fasta_file):
            fasta_df = fasta_df.append({
                'name': title.split(None, 1)[0],
                'sequence': sequence.upper(),
            }, ignore_index=True)
    return fasta_df


def write_dataframe_to_csv(dataframe, filename, directory=None):
    """Writes a pandas.DataFrame to a CSV formatted file.

    The output CSV file is comma separated and if the file already exists, a
    number will be appended to the filename. The given output directory is
    created recursively if it does not exist. The column names in the dataframe
    is used as first line in the csv file.

    Parameters
    ----------
    dataframe : pandas.DataFrame
        The dataframe to be written to the CSV file.
    filename : string
        Base filename for writting the file, excluding the '.csv' extension.
    directory : string, optional
        An output directory to write the file to (default: current directory).

    """
    # Create directory's recursively if not exists.
    if directory is not None:
        if not os.path.isdir(directory):
            os.makedirs(directory, exist_ok=True)
    else:
        directory = os.getcwd()

    # Check if the filename is unique, modify name if necessary.
    file_count = 1
    updated_filename = filename

    # Keep modifying the filename until it doesn't exist.
    while os.path.isfile(os.path.join(directory, updated_filename + '.csv')):
        updated_filename = str(filename) + '_' + str(file_count)
        file_count += 1

    # Write dataframe contents to csv file.
    pandas.DataFrame.to_csv(dataframe, path_or_buf=os.path.join(
        directory, updated_filename + '.csv'), sep=',', index=False)
    print("Written '{}' file to '{}' directory".format(
        updated_filename + '.csv', directory))
