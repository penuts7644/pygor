# Pygor is part of the IGoR (Inference and Generation of Repertoires) software.
# Pygor Python package can be used to post process files generated by IGoR.
# Copyright (C) 2018 Quentin Marcou & Wout van Helvoirt

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


"""AnchorLocator class for locating CDR3 anchor indices of given sequences."""


import numpy

from pygor.util.exception import GeneIdentifierException


class AnchorLocator(object):
    """Class for locating CDR3 anchors within the given nucleotide sequences.

    Parameters
    ----------
    alignment : Bio.AlignIO
        An biopython MUSCLE alignement object from alignment.MuscleAligner.
    gene : string
        A gene identifier, either V or J, specifying the alignement's origin.

    Methods
    -------
    get_indices_motifs(custom_motifs=None)
        Returns the indices dictionarys for each of the given motifs in the
        given list.

    """
    def __init__(self, alignment, gene):
        super(AnchorLocator, self).__init__()
        self.alignment = alignment
        self.gene = self._set_gene(gene)

    @staticmethod
    def _set_gene(gene):
        """Private setter function for setting the gene identifier.

        Parameters
        ----------
        gene : string
            A gene identifier, either V or J, specifying the alignment's origin.

        Returns
        -------
        str
            The gene character if passing the validation tests.

        Raises
        ------
        GeneIdentifierException
            When gene character is not 'V' or 'J'.

        """
        gene = gene.upper()
        if gene not in ["V", "J"]:
            raise GeneIdentifierException("Gene identifier needs to be 'V' or 'J'", gene)
        return gene

    @staticmethod
    def _find_conserved_motif_indices(alignment, motif):
        """Find the most conserved motif region within the MUSCLE alignment.

        This function finds conserved motif regions using the provided V or J
        gene multi-alignment.

        Parameters
        ----------
        alignment : Bio.AlignIO
            An biopython MUSCLE alignement object from alignment.MuscleAligner.
        motif : str
            A motif string specifying the region to locate.

        Returns
        -------
        dict
            Containing start index values for each sequence identifier in the
            alignment.

        """
        # Loop over alignment (codon length) and collect occurences of motif.
        motif_index_occurances = []
        for i in range(0, alignment.get_alignment_length() - len(motif)):
            motif_counts = numpy.zeros(len(alignment))
            alignment_codon = alignment[:, i:i + len(motif)]

            # For the motif alignment, count motif occurences and add to the counts.
            for seq_record, j in zip(alignment_codon, range(0, len(alignment_codon))):
                motif_counts[j] = (seq_record.seq == motif)

            # Calculate average of occurences (between 0 and 1) and add to start index.
            motif_index_occurances.append(float(sum(motif_counts)) / len(alignment_codon))

        # Create our indics dict and collect index with highest value attached.
        seq_motif_indices = {}
        max_index = motif_index_occurances.index(max(motif_index_occurances))
        for seq_record in alignment:

            # Only process sequences that contain the motif at the conserved index location.
            if seq_record.seq[max_index:max_index + len(motif)] == motif:
                start_index = len(str(seq_record.seq[0:max_index]).replace('-', ''))
                seq_motif_indices[seq_record.id] = start_index
        return seq_motif_indices

    def get_indices_motifs(self, custom_motifs=None):
        """Collect the conserved indices in the multi-alignment for each motif.

        Parameters
        ----------
        custom_motifs : list, optional
            Use custom motif strings to search for in the alignment. If not
            specified, default motifs for the V or J genes are used (See notes
            for more info).

        Returns
        -------
        dict
            Containing the motifs as key and their respective indices dictionary
            for the sequences in the multi-alignment as value.

        Notes
        -----
            This function uses the given MUSCLE alignment and gene identifier.
            It locates the most common 'V' (Cystein - TGT and TGC) or 'J'
            (Tryptophan - TGG, Phenylalanine - TTT and TTC) index that covers
            all sequences in the multi-alignment.

        """
        # Set the motifs list.
        if isinstance(custom_motifs, list):
            motifs = custom_motifs
        elif self.gene == "V":
            motifs = ["TGT", "TGC"]
        elif self.gene == "J":
            motifs = ["TGG", "TTT", "TTC"]

        indices_motifs = {}
        for motif in motifs:
            indices_motifs[motif] = self._find_conserved_motif_indices(
                self.alignment, motif)
        return indices_motifs


def main():
    """Function to be called when file executed via terminal."""
    print(__doc__)


if __name__ == "__main__":
    main()
